#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
Functions for custom management of compute cluster qsub jobs
'''
# ~~~~~ LOGGING ~~~~~~ #
import os
import shutil
from util import log
from util import qsub
from util import tools as t
import logging
import config


logger = logging.getLogger(__name__)

# path to the script's dir
scriptdir = os.path.dirname(os.path.realpath(__file__))
scriptname = os.path.basename(__file__)
script_timestamp = log.timestamp()

# ~~~~~ LOAD CONFIGS ~~~~~ #
configs = config.config



# ~~~~ CUSTOM FUNCTIONS ~~~~~~ #
def monitor_validate_jobs(jobs):
    '''
    Monitor qsub jobs that were generated by tasks which did not wait for job completion

    wait for them all to complete, then check them all for their qacct completion status

    jobs = list of qsub.Job objects

    TODO: add error handling of invalid or err_jobs here
    '''
    logger.debug('Waiting for qsub jobs to complete:\n{0}'.format([(job.id, job.name) for job in jobs]))

    completed_jobs, err_jobs = qsub.monitor_jobs(jobs = jobs)

    logger.debug('All jobs completed')

    if err_jobs:
        logger.error('Some jobs had errors: {0}'.format([(job.id, job.name) for job in err_jobs]))

    logger.debug('Validating completion status of jobs...')
    job_validations = [job.validate_completion() for job in completed_jobs]
    if all(job_validations):
        logger.debug('All jobs appear to have completed successfully')
    else:
        for job in completed_jobs:
            if not job.validate_completion():
                logger.error('Job {0} did not complete successfully!'.format(job.id))
